- const getInputName = (f, property) => f[property];

mixin formFor(form, errors, options = {})
  - const url = _.get(options, 'url');
  - const method = _.get(options, 'method', 'get').toLowerCase();
  - const isStandart = _.includes(['get', 'post'], method);
  - const id = _.get(options, 'id');
  form(action= url method= isStandart ? method : 'post' id=id || '')
    if !isStandart
      input(name='_method' type='hidden' value= method)
    block

mixin jumb
  .col-md-6.mx-auto
    .jumbotron.mt-5
      block 

mixin alert(flash)
  if flash && flash.message
    .alert.alert-info.m-3= flash.message

mixin input(form, errors, property, options = { as: 'text', label: property })
  - const value = form[property] === undefined ? '' : form[property]
  .form-group(class=(errors[property] && 'has-danger'))
      label= options['label']
      input(name=property class='form-control' type=options['as'] value=`${value}`)
      if errors[property]
        .form-control-feedback.small.form-text.text-muted= errors[property].map(({ message }) => message).join('. ')

mixin button(form, options = { type: 'submit', value: 'Save', class: '' } )
  .form-group
    input.btn.btn-primary(class=options.class, type=`${options.type}` value=`${options.value}`)


mixin card(task)
  .card.mx-3.mb-3(style="width: 18rem")
    .card-header Status: #{task.status}
    .card-body
      h4.card-title= task.name
      h6.card-text Assigned to: #{task.assignedTo}

      a.card-link(href=urlFor('task', task.id)) Open

mixin select(form, errors, property, label, values, formId)
  - const value = form[property] === undefined ? '' : form[property]
  .form-group
    label= label
    select(class="form-control", name=property, form=formId)
      each val in values   
        if property == 'statusId'
          option(value=val.id)= val.name
        else
          option(value=val.id)= val.getFullName()
